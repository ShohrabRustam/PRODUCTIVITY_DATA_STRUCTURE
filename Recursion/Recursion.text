
    1. WHAT IS RECURSION ?
    2. EXAMPLE OF RECURSION
    3. TRACKING RECURSION
    4. STACK USED IN RECURSION
    5. TIME COMPLEXITY
    6. RECURRENCE RELATION

    1. WHAT IS RECURSION ?

    """
    IF A FUNCTION CALLING ITSELF KNOW AS RECUSIVE FUNCTION.

    ###
        THERE MUST BE A BASE CONDITION (TERMINATE CONDITION) TO TERMINATE THE 
        FUNCTION OTHERWISE IT WILL GO INFINITE CALL.
    ###

    """
    Recursion is the process of defining a problem 
    (or the solution to a problem) in terms of (a simpler version of) itself.
    For example, we can define the operation "find your way home" as:
    If you are at home, stop moving. Take one step toward home.
    """

    2. EXAMPLE OF RECURSION :

        int fact(int n){
            if (n==1 || n== 0){
                return 1;
            }
            if (n<0){
                return -1;
            }
            return n* fact(n-1);
        }
    
    3. TRACKING RECURSION :
        
        """
            RECURSIVE FUNCTION TRACE IN FORM OF TREE 
        """
    
    # MAIN INPORTANT THING IS THAT RECURSIVE FUNCTION HAVE TWO PHASE 
        1. EXCUTION PHASE [ASCENDING PHASE] 
        2. RETURNING PHASE [DECENDING PHASE]

    """ RECURSIVE FUNCTION JUST LIKE RUBBER BAND  """

    QUESTION : DIFFERECE BETWEEN LOOP AND RECURSION: 
        """ 
            LOOPS ARE REPEATING STATEMENTS  AND RECURSION ALSO REPEATING
            STATEMENTS BUT THE DIFFERECES IS THAT LOOP HAVE ONELY EXCUTION
            PHASE [ASCENDING] BUT RECURRENCE HAVE ASCENDING AS WELL AS 
            DECENDING PHASE, THIS IS THE STRENGTH/POWER OF RECURSION.
        """
    
    4. STACK USED IN RECURSION : 

    """ 
    Recursive functions use something called “the call stack. When a program 
    calls a function, that function goes on top of the call stack. This is 
    similar to a stack of books. You add things one at a time. Then,when 
    you are ready to take something off, you always take off the top item.

    Every time activation record generated in stack untill we reached to the 
    base case or terminated case. after reached the base case activation 
    record deleted from the stack and control goes to the previous call.
    """

    5. TIME AND SPACE COMPLEXITY : 
            SPACE COMPLEXITY in recursion may be define as how much activation 
        records generated in the stack will be space complexity of recursion.

        TIME COMPLEXITY of recursion depends on the number of times 
        the function calls itself.If a function calls itself two times 
        then its time complexity is O(2 ^ N). if it calls three times
        then its time complexity is O(3 ^ N) and so on.

    6. RECURRENCE RELATION
        """
        A recurrence or recurrence relation defines an infinite sequence 
        by describing how to calculate the n-th element of the sequence 
        given the values of smaller elements.
        as in: T(n) = T(n/2) + n, T(0) = T(1) = 1.
        """

    TYPES OF RECURSIONS : 
        MAINLY THERE ARE 5 TYPES OF RECURSIONS : 
        1. TAIL RECURSION
        2. HEAD RECURSION
        3. TREE RECURSION
        4. INDIRECT RECURSION
        5. NESTED RECURSION

    1. TAIL RECURSION :
        """
        A special form of recursion where the last operation 
        of a function is a recursive call. The recursion may be 
        optimized away by executing the call in the current stack frame
        and returning its result rather than creating a new stack frame.
        ex- 
 
            void recursion_func(int n)
            {
                if (n < 0)
                    return;
                printf("%d ", n);

                // The last executed statement is recursive call
                recursion_func(n - 1);
            }
        """

    2. HEAD RECURSION :
        """
        if a recursive function calling itself and that recursive call is the 
        first statement in the function then it's known as Head Recursion. 
        There's no statement, no operation before the call. 
        The function doesn't have to process or perform any operation 
        at the time of calling and all operations are done at returning time. 
        example: 
            void recursion_func(int n)
            {
                if (n > 0) {
            
                    // First statement in the function
                    recursion_func(n - 1);
                    func_abc();
                }
            }
        """

    3. TREE RECURSION :
        """
        To understand Tree Recursion let’s first understand Linear Recursion.
        If a recursive function calling itself for one time then 
        it’s known as Linear Recursion. Otherwise if a recursive function 
        calling itself for more than one time then it’s known as 
        Tree Recursion.
        example: 
            void recursion_func(int n){
            if (n > 0) {    
                // Calling once
                recursion_func(n - 1);
                    
                // Calling twice
                frecursion_funcun(n - 1);
                }
            }
  
        """
    4. INDIRECT RECURSION :
        """
        In indirect recursion, a function calls another function which then calls the first function again. The recursion ends when the base case is met, at this point, the process stops. An example of an indirect recursive function is a function that decides whether a given number is even or odd.

        example:
            isOdd(int n){
                if (n==0){
                    return n;
                }
                return isEven(n-1)
            }
            isEven(int n){
                 if (n==0){
                    return n;
                }
                return isOdd(n-1)
            }
        """ 
    
    5. NESTED RECURSION :
        """ 
        n Nested recursion, the recursive function will pass the parameter as a recursive call. For better understanding, please have a look at the below example. In the below example nested is a recursive function which calls itself. But the parameter itself is a recursive call.

        ex:- 
                int recursion_func(int n){
                        if (n>100){
                            return n-10;
                        }
                        return recursion_func(recursion_func(n+1))
                }
        """