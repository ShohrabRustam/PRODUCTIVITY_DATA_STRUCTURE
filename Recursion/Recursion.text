
    1. WHAT IS RECURSION ?
    2. EXAMPLE OF RECURSION
    3. TRACKING RECURSION
    4. STACK USED IN RECURSION
    5. TIME COMPLEXITY
    6. RECURRENCE RELATION

    1. WHAT IS RECURSION ?

    """
    IF A FUNCTION CALLING ITSELF KNOW AS RECUSIVE FUNCTION.

    ###
        THERE MUST BE A BASE CONDITION (TERMINATE CONDITION) TO TERMINATE THE 
        FUNCTION OTHERWISE IT WILL GO INFINITE CALL.
    ###

    """
    Recursion is the process of defining a problem 
    (or the solution to a problem) in terms of (a simpler version of) itself.
    For example, we can define the operation "find your way home" as:
    If you are at home, stop moving. Take one step toward home.
    """

    2. EXAMPLE OF RECURSION :

        int fact(int n){
            if (n==1 || n== 0){
                return 1;
            }
            if (n<0){
                return -1;
            }
            return n* fact(n-1);
        }
    
    3. TRACKING RECURSION :
        
        """
            RECURSIVE FUNCTION TRACE IN FORM OF TREE 
        """
    
    # MAIN INPORTANT THING IS THAT RECURSIVE FUNCTION HAVE TWO PHASE 
        1. EXCUTION PHASE [ASCENDING PHASE] 
        2. RETURNING PHASE [DECENDING PHASE]

    """ RECURSIVE FUNCTION JUST LIKE RUBBER BAND  """

    QUESTION : DIFFERECE BETWEEN LOOP AND RECURSION: 
        """ 
            LOOPS ARE REPEATING STATEMENTS  AND RECURSION ALSO REPEATING
            STATEMENTS BUT THE DIFFERECES IS THAT LOOP HAVE ONELY EXCUTION
            PHASE [ASCENDING] BUT RECURRENCE HAVE ASCENDING AS WELL AS 
            DECENDING PHASE, THIS IS THE STRENGTH/POWER OF RECURSION.
        """
    
    4. STACK USED IN RECURSION : 

    """ 
    Recursive functions use something called â€œthe call stack. When a program 
    calls a function, that function goes on top of the call stack. This is 
    similar to a stack of books. You add things one at a time. Then,when 
    you are ready to take something off, you always take off the top item.

    Every time activation record generated in stack untill we reached to the 
    base case or terminated case. after reached the base case activation 
    record deleted from the stack and control goes to the previous call.
    """

    5. TIME AND SPACE COMPLEXITY : 
            SPACE COMPLEXITY in recursion may be define as how much activation 
        records generated in the stack will be space complexity of recursion.

        TIME COMPLEXITY of recursion depends on the number of times 
        the function calls itself.If a function calls itself two times 
        then its time complexity is O(2 ^ N). if it calls three times
        then its time complexity is O(3 ^ N) and so on.