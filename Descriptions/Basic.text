Topics to be cover in this golf_course

1. Array
2. Structure
3. Pointer
4. Reference
5. Parameter passing
6. Classes
7. Constructor
8. Template


1. Array : 
Array is define as collections of similar data if we have set of float,interger,string,etc,
group them under an name as array of float, array of int, array of string.

ex: int A[n]  : int->(type of array), n -> size of array , A-> name of array
int A[n] -> declaretion of an array 
int A[n] = {0,.,.,.,n-1} -> array declaretion with initialize.

2. Structure:
Structure can be defined as collections of data member that are related data members
under one name. those data members may be similar/dis-similar data type.
 * Structure is used for user define data types.

 a. define a Structure
 b. size of a Structure
 c. declaretion of a Structure
 4. Accessing a Structure data member

 a. define a Structure:
    
    struct Rectange{
        int length;
        int height;
    }; ---> 2 byte for length, 2 byte for height (4 bytes for Rectange Structure)

b. size of a Structure: 
    size of a Structure is defined as total size take by its data members.

c. declaretion of a Structure:
    int main(){
        struct Rectange r;
        r.length = 100;
        r.height= 20;
        or
        struct Rectange r = {100,20}

    }
d. Accessing a Structure:
    struct Rectange r;
    r.length = 100;
    r.height= 20;

    accessing of member of structure,
    return (r.length * r.height); (accessible of member of structure)
 
3.Pointer: 
Before starting we should be understand below points

3.1. What is Pointer
3.2. Why Pointer
3.3. Initialization
3.4. Dereferencing
3.5. Dynamic Allocation

3.1.What is Pointer : 
    * Pointer is a address variable that can be used for storing address information
    of a variable not data itself.
    * Normal variables are data variables that contain data but pointer variables are
    address variables that contain address information of a variable.
    * Pointer use for indirect accessing the data.

3.2 Why Pointer :
The main memory is devided into three main parts.
3.2.1. main program (code memory)
3.2.2 Heap memory (External to the program outside the program)
3.2.3 Stack memory

program -> stack(using pointer) -> heap

 the main (where code is written) program can accessible the data of stack memory 
 it can not access the data of heap memory directly so for access the data of
 heap memory pointer come in picture.

 The main use of pointer to access the resources which is outside of the program
 i,e. keyboard,monitor,mouse,printer,internet,etc.

 Use of Pointer:
    a. Accessing Heap
    b. Accessing External Resources
    c. Parameter Passing

3.3. How to use Pointer (Initialization):

data variable:  int a = 10
address variable: int *p;
                    p = &a;

3.4. Dereferencing a Pointer:

data variable:  int a = 10
address variable: int *ptr;
                    ptr = &a;

Dereferencing = Print(*ptr)

3.5. Dynamic Allocation :
    Dynamic Allocationpointer example
int main(){
    int * ptr;
    int size = 10;
    /* delcare array in heap memory in c language use malloc function */
    ptr =(int *) malloc(size*sizeof(int)); //malloc function returns void pointer
    //malloc function allocated heap memory
    
    /* delcare array in heap memory in cpp language we are using new keyword */
    ptr = new int a[size]
    }   

 Reference: Reference features is available only in cpp language not part of c language.
  * referece is a nick name given to a variable or alias to a variable.
  example: 
            int a=10;
            int &r = a;
            cout << a; // print 10
            r = r++;
            cout << r; // print 11
            cout << a; // print 11
 this is the important features of the cpp for write small function.

 



