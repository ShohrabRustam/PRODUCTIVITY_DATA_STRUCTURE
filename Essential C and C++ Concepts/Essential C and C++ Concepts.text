Topics to be cover in this golf_course

1. Array
2. Structure
3. Pointer
4. Reference
5. Parameter passing
6. Classes
7. Constructor
8. Template


1. Array : 
Array is define as collections of similar data if we have set of float,interger,string,etc,
group them under an name as array of float, array of int, array of string.

ex: int A[n]  : int->(type of array), n -> size of array , A-> name of array
int A[n] -> declaretion of an array 
int A[n] = {0,.,.,.,n-1} -> array declaretion with initialize.

2. Structure:
Structure can be defined as collections of data member that are related data members
under one name. those data members may be similar/dis-similar data type.
 * Structure is used for user define data types.

 a. define a Structure
 b. size of a Structure
 c. declaretion of a Structure
 4. Accessing a Structure data member

 a. define a Structure:
    
    struct Rectange{
        int length;
        int height;
    }; ---> 2 byte for length, 2 byte for height (4 bytes for Rectange Structure)

b. size of a Structure: 
    size of a Structure is defined as total size take by its data members.

c. declaretion of a Structure:
    int main(){
        struct Rectange r;
        r.length = 100;
        r.height= 20;
        or
        struct Rectange r = {100,20}

    }
d. Accessing a Structure:
    struct Rectange r;
    r.length = 100;
    r.height= 20;

    accessing of member of structure,
    return (r.length * r.height); (accessible of member of structure)
 
3.Pointer: 
Before starting we should be understand below points

3.1. What is Pointer
3.2. Why Pointer
3.3. Initialization
3.4. Dereferencing
3.5. Dynamic Allocation

3.1.What is Pointer : 
    * Pointer is a address variable that can be used for storing address information
    of a variable not data itself.
    * Normal variables are data variables that contain data but pointer variables are
    address variables that contain address information of a variable.
    * Pointer use for indirect accessing the data.

3.2 Why Pointer :
The main memory is devided into three main parts.
3.2.1. main program (code memory)
3.2.2 Heap memory (External to the program outside the program)
3.2.3 Stack memory

program -> stack(using pointer) -> heap

 the main (where code is written) program can accessible the data of stack memory 
 it can not access the data of heap memory directly so for access the data of
 heap memory pointer come in picture.

 The main use of pointer to access the resources which is outside of the program
 i,e. keyboard,monitor,mouse,printer,internet,etc.

 Use of Pointer:
    a. Accessing Heap
    b. Accessing External Resources
    c. Parameter Passing

3.3. How to use Pointer (Initialization):

data variable:  int a = 10
address variable: int *p;
                    p = &a;

3.4. Dereferencing a Pointer :

data variable:  int a = 10
address variable: int *ptr;
                    ptr = &a;

Dereferencing = Print(*ptr)

3.5. Dynamic Allocation :
    Dynamic Allocationpointer example
    int main(){
        int * ptr;
      ß  int size = 10;
        /* delcare array in heap memory in c language use malloc function */
        ptr =(int *) malloc(size*sizeof(int)); //malloc function returns void pointer
        //malloc function allocated heap memory
        
        /* delcare array in heap memory in cpp language we are using new keyword */
        ptr = new int a[size]
    }   

 4. Reference: 
    Reference features is available only in cpp language not part of c language.
  * referece is a nick name given to a variable or alias to a variable.
    example: 
            int a=10;
            int &r = a;
            cout << a; // print 10
            r = r++;
            cout << r; // print 11
            cout << a; // print 11

 this is the important features of the cpp for write small function.

    Pointer to Structure :
        pointer to Structure is the topic where a pointer have the address of the structure
        
        example of pointer to Structure:
                struct Rectange{
                    int length,height;
                };
                int main(int argc, char){
                    struct Rectange r = {10,30};
                    struct Rectange *ptr = &r;
                    (*ptr).length = 20;
                    or 
                    ptr->length = 20;

                    create dynamically using malloc 

                    struct Rectange *dynamic_ptr;
                    dynamic_ptr = (struct Rectange *)malloc(sizeof(struct Rectange));
                    dynamic_ptr->length = 10;
                    dynamic_ptr->height = 20;


                }

    Functions : 
        1. What are functions?
        2.Parameter Passing
            2.1 Pass by Value
            2.2 Pass by Address
            2.3 Pass by Reference

    
    1. What are functions?
        function is a peace of code which perform a specific task.
        we already study of structure we define a structure as grouping
        related data members.
        * function is a group of related instructions to perform a specific task.

        * Monolithic Programming : 
            if we are writting everything in a single function know as Monolithic Programming
            example of Monolithic Programming:
            fun(){
                ----
                ----
                ----
            }
        
        * Moduler/Procedular programming :
            if we break a function into smaller functions and call within the
            function known as Moduler/Procedular programming.

            example of Moduler/Procedular programming is:
                func(){
                    fun1();
                    fun2();
                }
    
    * Parameters Passing to the function:
        There are three parameters passing mathod 
            a. Pass by Value
            b. Pass by Address
            c. Pass by referece
     
    a.Pass by Value/Call by value :
        if we are passing the value to a function while function calling
            ex:- call by value
                void swap(int a, int b){ //a,b is formal parameter
                    int temp = a;
                    a= b;
                    b= temp;
                }
                int main() {
                    int a=10;
                    int b=20;
                    swap(a,b); //a,b actual parameter
                }

        * No swap happen because actual parameter remain same
        *call by value is not suitable to modified the actual parameter


    b.Pass by Pointer/Call by Address :
        if we are passing the Address to a function while function calling
            ex:- call by address
                void swap(int *a, int *b){ //a,b is formal parameter
                    int temp = *a;
                    *a= *b;
                    *b= temp;
                }
                int main() {
                    int a=10;
                    int b=20;
                    swap(&a,&b); //a,b actual parameter
                }

    * swap happen because actual parameter remain same
    * passing by address is suitable to modified the actual parameter


    c. Call by referece :
        call by referece only supported in cpp this is not part of c language
        this is very useful and very powerful features or mechanism of cpp

        * it just same as call by value in function declaretion we just pass 
            address of a formal parameter to the function
            
            ex:- call by referece 
                void swap(int &a, int &b){ //a,b is formal parameter
                    int temp = a;
                    a= b;
                    b= temp;
                }
                int main() {
                    int a=10;
                    int b=20;
                    swap(a,b); //a,b actual parameter
                }

    Array as parameter: 
        if we are passing as a parameter, we call it as pass as a parameter
        
        **** Array is only pass by address
        
        ex: array as parameter

        void printarray(int A[],int sizeofarray) or void printarray(int *A,int sizeofarray)
        {

            int i ;
            for(i=0;i<sizeofarray;i++){
                cout << A[i];
            }
        }

        void main(){

                int A[] = {1,2,3,4,5,6,7,8,9};


                int sizeofarray = sizeof(A)/sizeof(A[0]);

                printarray(A,sizeofarray);
        }

    
    ** Returning as an Array

     int [] returnArray(int sizeofarray)  or int * returnArray(int sizeofarray){
            int * ptr;
            ptr = (int *) malloc(sizeofarray*sizeof(int));
            return ptr;
        }
    int main(){
            int *A;
            int size = 5;
            A = return_array(size)
            for(int i = 0; i < sizeof(A)/sizeof(A[0]); i++){
                cout<<" "<<A[i]<<endl;
            }
        return 0;
    }


    ** Structure as a Parameter / Call by Structure:
        when we are passing the structure as a parameter to the function known as structure as parameter

        example 1: pass as structure call by value

        struct Rectange {
            int length,height;
        };

        int area(struct Rectange r1){
            return ((r1.height) * (r1.length)) ;
        }
        
        int main() {
            struct Rectange r = {2,4};

            cout << area(r);
        }

    example 2: pass as structure call by referece

        struct Rectange {
            int length,height;
        };

        int area(struct Rectange &r1){
            return ((r1.height) * (r1.length)) ;
        }
        
        int main() {
            struct Rectange r = {2,4};

            cout << area(r);
        }

     example 3: pass as structure call by address

        struct Rectange {
            int length,height;
        };

        void changeLength(struct Rectange *r1,int length){
            r1->length= length
            
        }
        
        int main() {
            struct Rectange r = {2,4};
            newlength = 10
           changeLength(&r,newlength);
           cout << "length: " << r.length <<"height : "<<r.height<< endl

        }
      

    # Structure and function: 
        
        we will cover here struct and function together
 
        struct Rectange{
            int length,height;
        };

        void initialize(struct Rectange *r,length,height){
                r.length = length;
                r.height = height;
        }

        int area(struct Rectange r){
            return ((r.length) * (r.height));
        }

        void changeLength(struct Rectange *r,length){
            r->length= length;
        }

        void main(){
            struct Rectange rectangle;
            initialize(rectangle,5,10);
            cout << "area: " << area(rectangle) << endl;
            changeLength(rectangle,20)
            cout << "area: "<<  area(rectangle) << endl
        }


    6. Classes :
    * A Class is a fundamental block of a program that has its own set of methods and variables. 
    * You can access these methods and variables by creating an object or the instance of the class. 
    * It's a user-defined source of information that a program can use to generate output based on the class's parameters.
    * A class is defined in C++ using keyword class followed by the name of the class. 
    * The body of the class is defined inside the curly brackets and terminated by a semicolon at the end. 
    class className { // some data // some functions };

    7. Constructor : 

    * A constructor is a special method of a class or structure in object-oriented programming that initializes a newly created object of that type.
    * Whenever an object is created, the constructor is called automatically
    * A constructor is a special “MEMBER FUNCTION” in C++ that has the same name as the class 
    * it belongs to and is used to initialise some useful values for an object's data members. 
    * The constructor is used to INITIALIZE VALUES and is automatically called by the compiler


    Template : 
        cpp support generic functions and generic class so generic functions know as 
        Template functions and generic classes know as Template classes. 

    example :- 
            class Arithmatic {
                private int a,int b;
                Arithmatic(int a,int b);
                int sum();
                int sub();
            };

            Arithmatic::Arithmatic(int a,int b){
                this->a = a;
                this->b = b;
            }

            Arithmatic:sum(){
                return (this->a + this->b);
            }
            
            Arithmatic::sub(){
                return (this->a - this->b);
            }

     example :-  generic function and class 
            template <class T>

            class Arithmatic {
                private T a,T b;
                Arithmatic(T a,T b);
                T sum();
                T sub();
            };

            template <class T>
            Arithmatic<T>::Arithmatic(T a,T b){
                this->a = a;
                this->b = b;
            }

            template <class T>
            Arithmatic:sum(){
                return (this->a + this->b);
            }

            template <class T>
            Arithmatic<T>::sub(){
                return (this->a - this->b);
            }

            int main(){
                Arithmatic <int> ar(10,20);
                cout << "sub"<<ar.sum();
                cout << ar.sub();
                return 0;
            }


 



